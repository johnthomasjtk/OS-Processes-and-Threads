%!PS-Adobe-3.0
%%BoundingBox: 18 36 577 806
%%Title: Enscript Output
%%Creator: GNU Enscript 1.6.5.90
%%CreationDate: Sat Sep 23 11:03:30 2017
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 90
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 90
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 90

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 559 def
/d_page_h 770 def
/d_header_x 0 def
/d_header_y 755 def
/d_header_w 559 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 559 def
/d_footer_h 0 def
/d_output_w 559 def
/d_output_h 755 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (Untitled Document) def
/fdir (.) def
/ftail (Untitled Document) def
% User defined strings:
/fmodstr (Sat Sep 23 11:03:11 2017) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 720 M
(1.) s
5 698 M
(Environmental variables are variables that are defined for the current shell and are inheri) s
5 687 M
(ted by any child shells or processes. Environmental variables are used to pass information ) s
5 676 M
(into processes that are spawned from the shell.We can see a list of all of our environmenta) s
5 665 M
(l variables by using the env or printenv commands) s
5 654 M
(Environment variables are a set of dynamic named values that can affect the way running pro) s
5 643 M
(cesses will behave on a computer. They are part of the environment in which a process runs.) s
5 621 M
(\(a\)) s
5 599 M
(PROGRAM :To print the  environmental variables) s
5 577 M
(#include<stdio.h>) s
5 566 M
(#include<stdlib.h> ) s
5 555 M
(int main\(\)) s
5 544 M
({) s
5 533 M
(printf\("PATH = %s\\n", getenv\("PATH"\)\);) s
5 522 M
(printf\("USER = %s\\n", getenv\("USER"\)\);) s
5 511 M
(printf\("HOME = %s\\n", getenv\("HOME"\)\);) s
5 500 M
(printf\("PWD  = %s\\n", getenv\("PWD"\)\);) s
5 489 M
(return \(0\);) s
5 478 M
(}) s
5 456 M
(OUTPUT) s
5 445 M
($ gcc -o 1a 1a.c -lpthread) s
5 434 M
($ ./1a) s
5 423 M
(PATH=/home/john/bin:/home/john/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin) s
5 412 M
(:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin) s
5 401 M
(USER = john) s
5 390 M
(HOME = /home/john) s
5 379 M
(PWD  = /home/john/Documents) s
5 291 M
(\(b\)) s
5 280 M
(The setenv\(\) function shall update or add a variable in the environment of the calling proc) s
5 269 M
(ess.) s
5 247 M
(PROGRAM) s
5 236 M
(#include<stdio.h>) s
5 225 M
(#include<stdlib.h> ) s
5 214 M
(int main\(\)) s
5 203 M
({) s
5 192 M
(setenv\("ROOT","root","1"\);) s
5 181 M
(printf\("ROOT = %s\\n", getenv\("ROOT"\)\);) s
5 170 M
(printf\("PATH = %s\\n", getenv\("PATH"\)\);) s
5 159 M
(printf\("USER = %s\\n", getenv\("USER"\)\);) s
5 148 M
(printf\("HOME = %s\\n", getenv\("HOME"\)\);) s
5 137 M
(printf\("PWD  = %s\\n", getenv\("PWD"\)\);) s
5 126 M
(return \(0\);) s
5 115 M
(}) s
5 104 M
(OUTPUT) s
5 93 M
($ gcc -o 1b 1b.c -lpthread) s
5 82 M
($ ./1b) s
5 71 M
(ROOT = root) s
5 60 M
(PATH = /home/john/bin:/home/john/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/b) s
5 49 M
(in:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin) s
5 38 M
(USER = john) s
5 27 M
(HOME = /home/john) s
5 16 M
(PWD  = /home/john/Documents) s
5 5 M
(2.) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (Untitled Document) def
/fdir (.) def
/ftail (Untitled Document) def
% User defined strings:
/fmodstr (Sat Sep 23 11:03:11 2017) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 731 M
(\(a\)) s
5 709 M
(PROGRAM ) s
5 687 M
(#include <stdio.h>) s
5 676 M
(#include <pthread.h>) s
5 665 M
(#include <stdlib.h>) s
5 643 M
(void * thread1\(\)) s
5 632 M
({) s
5 621 M
(        printf\("Hello World\\n"\);) s
5 610 M
(       ) s
5 599 M
(}) s
5 577 M
(int main\(\)) s
5 566 M
({) s
5 555 M
(        int status;) s
5 544 M
(        pthread_t tid1;) s
5 522 M
(        pthread_create\(&tid1,NULL,thread1,NULL\);) s
5 511 M
(       ) s
5 500 M
(        pthread_join\(tid1,NULL\);) s
5 489 M
(         return 0;) s
5 478 M
(}) s
5 456 M
(OUTPUT) s
5 434 M
($gcc -o 2a 2a.c -lpthread) s
5 423 M
($./2a) s
5 412 M
($ Hello World) s
5 368 M
(\(b\)) s
5 346 M
(PROGRAM) s
5 324 M
(#include <stdio.h>) s
5 313 M
(#include <pthread.h>) s
5 302 M
(#include <semaphore.h>) s
5 291 M
(#include <stdlib.h>) s
5 269 M
(#define TRUE 1) s
5 258 M
(#define FALSE 0) s
5 236 M
(char n[1024];) s
5 225 M
(pthread_mutex_t lock= PTHREAD_MUTEX_INITIALIZER;) s
5 214 M
(int string_read=FALSE;) s
5 192 M
(pthread_cond_t cond;) s
5 170 M
(void * read1\(\)) s
5 159 M
({) s
5 148 M
(        while\(1\){) s
5 137 M
(                while\(string_read\);) s
5 126 M
(                pthread_mutex_lock\(&lock\);) s
5 115 M
(                printf\("Enter a string: "\);) s
5 104 M
(                scanf\("%s",n\);) s
5 93 M
(                string_read=TRUE;) s
5 82 M
(                pthread_mutex_unlock\(&lock\);) s
5 71 M
(                pthread_cond_signal\(&cond\);) s
5 60 M
(        }) s
5 49 M
(}) s
5 27 M
(void * write1\(\)) s
5 16 M
({) s
5 5 M
(        while\(1\){) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (Untitled Document) def
/fdir (.) def
/ftail (Untitled Document) def
% User defined strings:
/fmodstr (Sat Sep 23 11:03:11 2017) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(                pthread_mutex_lock\(&lock\);) s
5 731 M
(                while\(!string_read\)) s
5 720 M
(                        pthread_cond_wait\(&cond,&lock\);) s
5 709 M
(                        printf\("The string entered is %s\\n",n\);) s
5 687 M
(                        string_read=FALSE;) s
5 676 M
(                        pthread_mutex_unlock\(&lock\);) s
5 665 M
(        }) s
5 654 M
(}) s
5 643 M
(int main\(\)) s
5 632 M
({) s
5 621 M
(        int status;) s
5 610 M
(        pthread_t tr, tw;) s
5 588 M
(        pthread_create\(&tr,NULL,read1,NULL\);) s
5 577 M
(        pthread_create\(&tw,NULL,write1,NULL\);) s
5 555 M
(        pthread_join\(tr,NULL\);) s
5 544 M
(        pthread_join\(tw,NULL\);) s
5 533 M
(        return 0;) s
5 522 M
(}) s
5 467 M
(OUTPUT) s
5 445 M
( john@johndt  ~$ gcc -o 2b 2b.c -lpthread) s
5 434 M
(                          $ ./2b) s
5 423 M
(                          Enter a string: Hello) s
5 412 M
(                          The string entered is Hello) s
5 357 M
(3 ) s
5 335 M
(The sequence of execution of the program would be  like the first  1000 'o' is printed whic) s
5 324 M
(h is inside the print_os\(\) function and  then 1000 'x' will be printed after that ,it means) s
5 313 M
( that the  print_os) s
5 302 M
(function is executed first and after its termination print_xs is executed.) s
5 280 M
(GIVEN PROGRAM) s
5 258 M
(#include <stdio.h>) s
5 247 M
(#include <pthread.h>) s
5 225 M
(static void print_os\(\);) s
5 203 M
(pthread_mutex_t mutex;) s
5 192 M
(void* print_xs\(void* unused\) {                                 ) s
5 181 M
(      int j;) s
5 170 M
(      pthread_mutex_lock\(&mutex\);                               // 2 .Locks the mutex...) s
5 159 M
(      for\(j = 0; j < 1000; j++\)                                 // 4 .Jumbs to main\(\)) s
5 148 M
(          fputc\('x', stderr\);                                                          // 7) s
5 137 M
(.prints 1000 x ) s
5 126 M
(pthread_mutex_unlock\(&mutex\);) s
5 115 M
(return NULL;) s
5 104 M
(}) s
5 93 M
(static void print_os\(\) {) s
5 82 M
(    int i;) s
5 71 M
(    for\(i = 0; i < 1000; i++\)) s
5 60 M
(           fputc\('o', stderr\);) s
5 49 M
(}) s
5 38 M
(int main\(\) {                                                                      // 1. Sta) s
5 27 M
(rts execution from here ) s
5 16 M
(    pthread_t new;) s
5 5 M
(    pthread_create\(&new, NULL, &print_xs, NULL\);    // 3.Spawning a new thread using print_) s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (Untitled Document) def
/fdir (.) def
/ftail (Untitled Document) def
% User defined strings:
/fmodstr (Sat Sep 23 11:03:11 2017) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(xs) s
5 731 M
(    pthread_mutex_lock\(&mutex\);                      // 4.main thread gets into critical re) s
5 720 M
(gion    ) s
5 709 M
(    print_os\(\);                                                                  //  5.call) s
5 698 M
(s the print_os\(\),thus prints 1000 \342\\200\\230o\342\\200\\231) s
5 687 M
(    pthread_mutex_unlock\(&mutex\);) s
5 676 M
(    pthread_join\(new, NULL\);                               // 6.calls join for new thread t) s
5 665 M
(o join execution) s
5 654 M
(return 0;) s
5 643 M
(}) s
5 555 M
(\(a\)) s
5 533 M
(On modifying the program such that the function print_xs executes before the) s
5 522 M
(function print_os using a synchronization primitive) s
5 500 M
(By using wait and signal for threads we can achieve  synchronization. ) s
5 489 M
(pthread_cond_wait\(\) blocks the thread that wants to access mutex and will only release the ) s
5 478 M
(thread when pthread_cond_signal\(\) is sent to the calling thread.) s
5 456 M
(Therefore, if the print_xs\(\) function need to execute first, then pthread_cond_wait\(\) will ) s
5 445 M
(be used in print_os\(\) function and in the print_xs\(\) function pthread_cond_signal\(\) will be) s
5 434 M
( used to signal the main\(\) function that can then lock and use the mutex.) s
5 412 M
(The pthread_mutex_lock\(\) routine is used by a thread to acquire a lock on the specified mut) s
5 401 M
(ex variable. If the mutex is already locked by another thread, this call will block the cal) s
5 390 M
(ling thread until the mutex is unlocked. ) s
5 368 M
(pthread_mutex_unlock\(\) will unlock a mutex if called by the owning thread. Calling this rou) s
5 357 M
(tine is required after a thread has completed its use of protected data if other threads ar) s
5 346 M
(e to acquire the mutex for their work with the protected data. An error will be returned if) s
5 335 M
(: ) s
5 324 M
(If the mutex was already unlocked ) s
5 313 M
(If the mutex is owned by another thread ) s
5 280 M
(PROGRAM ) s
5 247 M
(#include <stdio.h>) s
5 236 M
(#include <pthread.h>) s
5 214 M
(static void print_os\(\);) s
5 203 M
(pthread_t cond;) s
5 192 M
(pthread_mutex_t mutex;) s
5 181 M
(void* print_xs\(void* unused\) {) s
5 170 M
(      int j;) s
5 159 M
(pthread_mutex_lock\(&mutex\);                     ) s
5 148 M
(      for\(j = 0; j < 1000; j++\)) s
5 137 M
(          fputc\('x', stderr\);) s
5 126 M
(pthread_cond_signal\(&cond\);) s
5 115 M
(pthread_mutex_unlock\(&mutex\);) s
5 104 M
(return NULL;) s
5 93 M
(}) s
5 82 M
(static void print_os\(\) {) s
5 71 M
(    int i;) s
5 60 M
(    for\(i = 0; i < 1000; i++\)) s
5 49 M
(           fputc\('o', stderr\);) s
5 38 M
(}) s
5 27 M
(int main\(\) {) s
5 16 M
(    pthread_t new;) s
5 5 M
(    pthread_create\(&new, NULL, &print_xs, NULL\);        ) s
_R
S
%%Page: (5) 5
%%BeginPageSetup
_S
18 36 translate
/pagenum 5 def
/fname (Untitled Document) def
/fdir (.) def
/ftail (Untitled Document) def
% User defined strings:
/fmodstr (Sat Sep 23 11:03:11 2017) def
/pagenumstr (5) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(    pthread_mutex_lock\(&mutex\);                           ) s
5 731 M
(    pthread_cond_wait\(&cond,&mutex\);) s
5 720 M
(    print_os\(\);) s
5 709 M
(    pthread_mutex_unlock\(&mutex\);) s
5 698 M
(    pthread_join\(new, NULL\);) s
5 687 M
(return 0;) s
5 676 M
(}) s
5 643 M
(OUTPUT) s
5 632 M
(Prints 1000 \342\\200\\230x\342\\200\\231 first then 1000 \342\\200\\230o\342\\200\\231) s
5 544 M
(\(4\)) s
5 522 M
(PROGRAM) s
5 500 M
(#include <stdio.h>) s
5 489 M
(#include <pthread.h>) s
5 478 M
(#include <semaphore.h>) s
5 467 M
(#include <stdlib.h>) s
5 445 M
(#define TRUE 1) s
5 434 M
(#define FALSE 0) s
5 412 M
(int n,m;) s
5 401 M
(pthread_mutex_t lock;) s
5 390 M
(int string_read=FALSE;) s
5 368 M
(pthread_cond_t cond;) s
5 346 M
(void * thread1\(\)) s
5 335 M
({) s
5 324 M
(        while\(1\){) s
5 313 M
(                while\(string_read\);) s
5 302 M
(                pthread_mutex_lock\(&lock\);) s
5 291 M
(                printf\("Enter  values to multiply in main thread: "\);) s
5 280 M
(                scanf\("%d%d",&n,&m\);) s
5 269 M
(                string_read=TRUE;) s
5 258 M
(                pthread_mutex_unlock\(&lock\);) s
5 247 M
(                pthread_cond_signal\(&cond\);) s
5 236 M
(        }) s
5 225 M
(}) s
5 203 M
(void * thread2\(\)) s
5 192 M
({) s
5 181 M
(        while\(1\){) s
5 170 M
(                pthread_mutex_lock\(&lock\);) s
5 159 M
(                int o;) s
5 148 M
(                while\(!string_read\)) s
5 137 M
(                        pthread_cond_wait\(&cond,&lock\);) s
5 126 M
(                        o=m*n;) s
5 115 M
(                        printf\("Printing from thread 2: %d\\n",o\);) s
5 104 M
(                        string_read=FALSE;) s
5 93 M
(                        pthread_mutex_unlock\(&lock\);) s
5 82 M
(        }) s
5 71 M
(}) s
5 60 M
(int main\(\)) s
5 49 M
({) s
5 38 M
(        int status;) s
5 27 M
(        pthread_t t1, t2;) s
5 5 M
(        pthread_create\(&t1,NULL,thread1,NULL\);) s
_R
S
%%Page: (6) 6
%%BeginPageSetup
_S
18 36 translate
/pagenum 6 def
/fname (Untitled Document) def
/fdir (.) def
/ftail (Untitled Document) def
% User defined strings:
/fmodstr (Sat Sep 23 11:03:11 2017) def
/pagenumstr (6) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        pthread_create\(&t2,NULL,thread2,NULL\);) s
5 720 M
(        pthread_join\(t1,NULL\);) s
5 709 M
(        pthread_join\(t2,NULL\);) s
5 698 M
(        pthread_exit\(\(void *\)NULL\);) s
5 687 M
(        return 0;) s
5 676 M
(}) s
5 632 M
(OUTPUT) s
5 621 M
(john@johndt:~$ gcc -o 4a 4a.c -lpthread) s
5 610 M
(                          $ ./4a) s
5 599 M
(                          Enter 2 values in main thread: 2) s
5 588 M
(                          4) s
5 577 M
(                          Printing from thread 2: 8) s
_R
S
%%Trailer
%%Pages: 6
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
